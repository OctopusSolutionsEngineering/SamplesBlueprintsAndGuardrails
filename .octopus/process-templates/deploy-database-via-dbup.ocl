name = "Deploy Process - Deploy Database via DBUp"
description = "Process template that will deploy a database using DBUp"

icon {
    color = "#173B56"
    id = "database"
}

parameter "Template.Database.Package" {
    display_settings = {
        Octopus.ControlType = "Package"
    }
    help_text = "**Required:** The package containing all the DBUp executable and scripts to run."
    label = "Database Package"
}

parameter "Template.DbUp.Executable" {
    display_settings = {
        Octopus.ControlType = "SingleLineText"
    }
    help_text = "**Required:** The executable of your self-contained dotnet console application to run.  Example: `Trident.Database.DbUp`"
    label = "DBUp Executable"
}

parameter "Template.Database.ConnectionString" {
    display_settings = {
        Octopus.ControlType = "SingleLineText"
    }
    help_text = "**Required:** The connection string of the database to modify."
    label = "Database Connection String"
}

parameter "Template.Database.ChangeReportDirectory" {
    display_settings = {
        Octopus.ControlType = "SingleLineText"
    }
    help_text = "**Required:** The directory where the delta report will be stored after creation."
    label = "Delta Report Directory"

    value "../../#{Octopus.Project.Name}/#{Octopus.Release.Number}/#{Octopus.Environment.Name}" {}
}

parameter "Template.Notification.Email" {
    display_settings = {
        Octopus.ControlType = "SingleLineText"
    }
    help_text = "**Required:** The email addresses (separated by `;`) of the people to be notified for approval of the delta script."
    label = "Notification Email Addresses"
}

step "calculate-deployment-mode" {
    name = "Calculate Deployment Mode"

    action {
        action_type = "Octopus.Script"
        notes = <<-EOT
                **Always Runs**
                
                Step to determine if this run is a deployment, rollback, or re-deployment.
                EOT
        properties = {
            Octopus.Action.RunOnServer = "true"
            Octopus.Action.Script.ScriptBody = <<-EOT
                $currentReleaseNumber = $OctopusParameters["Octopus.Release.Number"]
                $previousReleaseNumber = $OctopusParameters["Octopus.Release.CurrentForEnvironment.Number"]
                $lastAttemptedReleaseNumber = $OctopusParameters["Octopus.Release.PreviousForEnvironment.Number"]
                $stepName = $OctopusParameters["Octopus.Action.StepName"]
                
                $currentReleasePreReleaseTag = ""
                $previousReleasePreReleaseTag = ""
                $lastAttemptedReleasePreReleaseTag = ""
                $currentReleaseBuildMetadata = ""
                $previousReleaseBuildMetadata = ""
                $lastAttemptedReleaseBuildMetadata = ""
                
                Write-Host "The current release number is $currentReleaseNumber"
                Write-Host "The last succesful release to this environment was $previousReleaseNumber"
                Write-Host "The last release that was attempted on this environment was $lastAttemptedReleaseNumber"
                Write-Host "The deployment name is $deploymentName"
                
                if ($previousReleaseNumber -like "*-*")
                {
                    $previousReleasePreReleaseTag = $previousReleaseNumber.SubString($previousReleaseNumber.IndexOf("-") + 1)
                	$previousReleaseNumber = $previousReleaseNumber.SubString(0, $previousReleaseNumber.IndexOf("-"))    
                }
                
                if ($currentReleaseNumber -like "*-*")
                {
                    $currentReleasePreReleaseTag = $currentReleaseNumber.SubString($currentReleaseNumber.IndexOf("-") + 1)
                	$currentReleaseNumber = $currentReleaseNumber.SubString(0, $currentReleaseNumber.IndexOf("-"))
                }
                
                if ($lastAttemptedReleaseNumber -like "*-*")
                {
                    $lastAttemptedReleasePreReleaseTag = $lastAttemptedReleaseNumber.SubString($lastAttemptedReleaseNumber.IndexOf("-") + 1)
                	$lastAttemptedReleaseNumber = $lastAttemptedReleaseNumber.SubString(0, $lastAttemptedReleaseNumber.IndexOf("-"))
                }
                
                if ($previousReleaseNumber -like "*+*")
                {
                    $previousReleaseBuildMetadata = $previousReleaseNumber.SubString($previousReleaseNumber.IndexOf("+") + 1)
                	$previousReleaseNumber = $previousReleaseNumber.SubString(0, $previousReleaseNumber.IndexOf("+"))    
                }
                
                if ($currentReleaseNumber -like "*+*")
                {
                    $currentReleaseBuildMetadata = $currentReleaseNumber.SubString($currentReleaseNumber.IndexOf("+") + 1)
                	$currentReleaseNumber = $currentReleaseNumber.SubString(0, $currentReleaseNumber.IndexOf("+"))
                }
                
                if ($lastAttemptedReleaseNumber -like "*+*")
                {
                    $lastAttemptedReleaseBuildMetadata = $lastAttemptedReleaseNumber.SubString($lastAttemptedReleaseNumber.IndexOf("+") + 1)
                	$lastAttemptedReleaseNumber = $lastAttemptedReleaseNumber.SubString(0, $lastAttemptedReleaseNumber.IndexOf("+"))
                }
                
                Write-Host "The non-pre release tag previous version for the environment was $previousReleaseNumber"
                Write-Host "The non-pre release tag current release number is $currentReleaseNumber"
                Write-Host "The non-pre release tag of the last attempted version for the environment was $lastAttemptedReleaseNumber"
                Write-Host "The pre-release tag for the previous version for the environment was $previousReleasePreReleaseTag"
                Write-Host "The pre-release tag for the current release number is $currentReleasePreReleaseTag"
                Write-Host "The pre-release tag for the last attempted version for the environment was $lastAttemptedReleasePreReleaseTag"
                Write-Host "The build metadata for the previous version for the environment was $previousReleaseBuildMetadata"
                Write-Host "The build metadata from the current version for the environment is $currentReleaseBuildMetadata"
                Write-Host "The build metadata for the last attempted version for the environment was $lastAttemptedReleaseBuildMetadata"
                
                $currentVersion = [System.Version]$currentReleaseNumber
                $previousVersion = [System.Version]$previousReleaseNumber
                $lastAttemptedVersion = [System.Version]$lastAttemptedReleaseNumber
                
                $differentVersions = $false
                $versionToCompare = $previousVersion
                if ($currentVersion -gt $previousVersion)
                {
                	Write-Host "The current release number $currentReleaseNumber is greater than the previous successful release number $previousReleaseNumber."
                	if ($currentVersion -lt $lastAttemptedVersion)
                    {
                    	Write-Host "The current release number $currentReleaseNumber is less than the last attempted release number $lastAttemptedReleaseNumber.  Setting deployment mode to rollback."
                	    $deploymentMode = "Rollback"
                        $versionToCompare = $lastAttemptedVersion
                    }
                    else
                    {
                    	Write-Host "The current release number $currentReleaseNumber is greater than the last attempted release number $lastAttemptedReleaseNumber.  Setting deployment mode to deploy."
                        $deploymentMode = "Deploy"
                    }
                }
                elseif ($currentVersion -lt $previousVersion)
                {
                	Write-Host "The current release number $currentReleaseNumber is less than the previous successful release number $previousReleaseNumber.  Setting deployment mode to rollback."
                    $deploymentMode = "Rollback"
                    $differentVersions = $true
                }
                elseif ($currentVersion -lt $lastAttemptedVersion)
                {
                	Write-Host "The current release number $currentReleaseNumber is less than the last attempted release number $lastAttemptedReleaseNumber.  Setting the deployment mode to rollback."
                    $deploymentMode = "Rollback"
                    $differentVersions = $true
                    $versionToCompare = $lastAttemptedVersion
                }
                elseif ($previousReleasePreReleaseTag -ne $currentReleasePreReleaseTag)
                {
                    Write-Host "The current release number $currentReleaseNumber equals the previous successful release number $previousReleaseNumber. But the current pre-release tag $currentReleasePreReleaseTag is not equal to the previous pre-release tag $previousReleasePreReleaseTag.  Setting the deployment mode to deploy."
                    $deploymentMode = "Deploy"
                }
                elseif ($lastAttemptedReleasePreReleaseTag -ne $currentReleasePreReleaseTag)
                {
                    Write-Host "The current release number $currentReleaseNumber equals the last attempted release number $lastAttemptedVersion. But the current pre-release tag $currentReleasePreReleaseTag is not equal to the previous pre-release tag $lastAttemptedReleasePreReleaseTag.  Setting the deployment mode to deploy."
                    $deploymentMode = "Deploy"
                }
                else
                {
                	Write-Host "The current release number $currentReleaseNumber matches the previous release number $previousReleaseNumber.  Setting deployment mode to redeployment."
                    $deploymentMode = "Redeploy"
                }
                
                $differenceKind = "Identical"
                if ($differentVersions)
                {
                	if ($currentVersion.Major -ne $versionToCompare.Major)
                    {
                    	Write-Host "$currentReleaseNumber is a major version change from $versionToCompare"
                    	$differenceKind = "Major"
                    }
                    elseif ($currentVersion.Minor -ne $versionToCompare.Minor)
                    {
                    	Write-Host "$currentReleaseNumber is a minor version change from $versionToCompare"
                    	$differenceKind = "Minor"
                    }
                    elseif ($currentVersion.Build -ne $versionToCompare.Build)
                    {
                    	Write-Host "$currentReleaseNumber is a build version change from $versionToCompare"
                    	$differenceKind = "Build"
                    }
                    elseif ($currentVersion.Revision -ne $versionToCompare.Revision)
                    {
                    	Write-Host "$currentReleaseNumber is a revision version change from $versionToCompare"
                    	$differenceKind = "Revision"
                    }
                }
                
                Set-OctopusVariable -Name "DeploymentMode" -Value $deploymentMode
                Set-OctopusVariable -Name "VersionChange" -Value $differenceKind
                
                Write-Highlight @"
                Output Variables Created (see log for example usage):
                   	- Octopus.Action[$($stepName)].Output.DeploymentMode - Set to '$deploymentMode'
                    - Octopus.Action[$($stepName)].Output.VersionChange - Set to '$differenceKind'    
                "@
                
                $runOnRollback = "#{if Octopus.Action[$($stepName)].Output.DeploymentMode == ""Rollback""}True#{else}False#{/if}"
                Write-Host "Setting the output variable 'Octopus.Action[$($stepName)].Output.RunOnRollback' so you can use it as a run condition"
                Write-Verbose $runOnRollback
                Set-OctopusVariable -Name "RunOnRollback" -Value $runOnRollback
                
                $runOnDeploy = "#{if Octopus.Action[$($stepName)].Output.DeploymentMode == ""Deploy""}True#{else}False#{/if}"
                Write-Host "Setting the output variable 'Octopus.Action[$($stepName)].Output.RunOnDeploy' so you can use it as a run condition"
                Write-Verbose $runOnDeploy
                Set-OctopusVariable -Name "RunOnDeploy" -Value $runOnDeploy
                
                $runOnRedeploy = "#{if Octopus.Action[$($stepName)].Output.DeploymentMode == ""Redeploy""}True#{else}False#{/if}"
                Write-Host "Setting the output variable 'Octopus.Action[$($stepName)].Output.RunOnRedeploy' so you can use it as a run condition"
                Write-Verbose $runOnRedeploy
                Set-OctopusVariable -Name "RunOnRedeploy" -Value $runOnRedeploy
                
                $runOnDeployOrRollback = "#{if Octopus.Action[$($stepName)].Output.DeploymentMode != ""Redeploy""}True#{else}False#{/if}"
                Write-Host "Setting the output variable 'Octopus.Action[$($stepName)].Output.RunOnDeployOrRollback' so you can use it as a run condition"
                Write-Verbose $runOnDeployOrRollback
                Set-OctopusVariable -Name "RunOnDeployOrRollback" -Value $runOnDeployOrRollback
                
                $runOnDeployOrRedeploy = "#{if Octopus.Action[$($stepName)].Output.DeploymentMode != ""Rollback""}True#{else}False#{/if}"
                Write-Host "Setting the output variable 'Octopus.Action[$($stepName)].Output.RunOnDeployOrRedeploy' so you can use it as a run condition"
                Write-Verbose $runOnDeployOrRedeploy
                Set-OctopusVariable -Name "RunOnDeployOrRedeploy" -Value $runOnDeployOrRedeploy
                
                $runOnRedeployOrRollback = "#{if Octopus.Action[$($stepName)].Output.DeploymentMode != ""Deploy""}True#{else}False#{/if}"
                Write-Host "Setting the output variable 'Octopus.Action[$($stepName)].Output.RunOnRedeployOrRollback' so you can use it as a run condition"
                Write-Verbose $runOnRedeployOrRollback
                Set-OctopusVariable -Name "RunOnRedeployOrRollback" -Value $runOnRedeployOrRollback
                
                $runOnMajorVersionChange = "#{if Octopus.Action[$($stepName)].Output.VersionChange == ""Major""}True#{else}False#{/if}"
                Write-Host "Setting the output variable 'Octopus.Action[$($stepName)].Output.RunOnMajorVersionChange' so you can use it as a run condition"
                Write-Verbose $runOnMajorVersionChange
                Set-OctopusVariable -Name "RunOnMajorVersionChange" -Value $runOnMajorVersionChange
                
                $runOnMinorVersionChange = "#{if Octopus.Action[$($stepName)].Output.VersionChange == ""Minor""}True#{else}False#{/if}"
                Write-Host "Setting the output variable 'Octopus.Action[$($stepName)].Output.RunOnMinorVersionChange' so you can use it as a run condition"
                Write-Verbose $runOnMinorVersionChange
                Set-OctopusVariable -Name "RunOnMinorVersionChange" -Value $runOnMinorVersionChange
                
                $runOnMajorOrMinorVersionChange = "#{if Octopus.Action[$stepName].Output.VersionChange == ""Major""}True#{else}#{if Octopus.Action[$stepName].Output.VersionChange == ""Minor""}True#{else}False#{/if}#{/if}"
                Write-Host "Setting the output variable 'Octopus.Action[$($stepName)].Output.RunOnMajorOrMinorVersionChange' so you can use it as a run condition"
                Write-Verbose $runOnMajorOrMinorVersionChange
                Set-OctopusVariable -Name "RunOnMajorOrMinorVersionChange" -Value $runOnMajorOrMinorVersionChange
                
                $runOnBuildVersionChange = "#{if Octopus.Action[$($stepName)].Output.VersionChange == ""Build""}True#{else}False#{/if}"
                Write-Host "Setting the output variable 'Octopus.Action[$($stepName)].Output.RunOnBuildVersionChange' so you can use it as a run condition"
                Write-Verbose $runOnBuildVersionChange
                Set-OctopusVariable -Name "RunOnBuildVersionChange" -Value $runOnBuildVersionChange
                
                $runOnRevisionVersionChange = "#{if Octopus.Action[$($stepName)].Output.VersionChange == ""Revision""}True#{else}False#{/if}"
                Write-Host "Setting the output variable 'Octopus.Action[$($stepName)].Output.RunOnRevisionVersionChange' so you can use it as a run condition"
                Write-Verbose $runOnRevisionVersionChange
                Set-OctopusVariable -Name "RunOnRevisionVersionChange" -Value $runOnRevisionVersionChange
                EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "PowerShell"
            OctopusUseBundledTooling = "False"
        }
    }
}

step "build-delta-report" {
    condition = "Variable"
    name = "Build Delta Report"
    properties = {
        Octopus.Step.ConditionVariableExpression = "#{unless Octopus.Deployment.Error}#{Octopus.Action[Deploy Databases-Calculate Deployment Mode].Output.RunOnDeploy}#{/unless}"
    }

    action {
        action_type = "Octopus.Script"
        notes = <<-EOT
                **Runs on Deployments Only**
                
                Builds a report containing all the scripts that haven't run on the target database.
                EOT
        properties = {
            Octopus.Action.ExecutionTimeout.Minutes = "15"
            Octopus.Action.RunOnServer = "true"
            Octopus.Action.Script.ScriptBody = <<-EOT
                $connectionString = $OctopusParameters["Template.Database.ConnectionString"]
                $changeReportDirectory = $OctopusParameters["Template.Database.ChangeReportDirectory"]
                $projectExe = $OctopusParameters["Template.DbUp.Executable"]
                $environmentName = $OctopusParameters["Octopus.Environment.Name"]
                $extractedPath = $OctopusParameters["Octopus.Action.Package[Template.Database.Package].ExtractedPath"]
                
                # Check to see if $IsWindows is available
                if ($null -eq $IsWindows) {
                    Write-Host "Determining Operating System..."
                    $IsWindows = ([System.Environment]::OSVersion.Platform -eq "Win32NT")
                    $IsLinux = ([System.Environment]::OSVersion.Platform -eq "Unix")
                }
                
                # Fix ANSI Color on PWSH Core issues when displaying objects
                if ($PSEdition -eq "Core") {
                    $PSStyle.OutputRendering = "PlainText"
                }
                
                
                Get-ChildItem -Path "$extractedPath" -File
                                
                Write-Host "Setting the current location to $extractedPath"
                Set-Location $extractedPath
                                
                Write-Host "Doing a what-if migration, generating a change report at $changeReportDirectory"
                                
                if ((test-path $changeReportDirectory) -eq $false){
                  Write-Host "The directory $changeReportDirectory does not exist, creating it now"
                  New-Item $changeReportDirectory -ItemType "directory"
                }
                
                if ($IsLinux)
                {
                  chmod +x "./$projectExe"
                }
                
                & "./$projectExe" --ConnectionString="$connectionString" --PreviewReportPath="$changeReportDirectory"
                                
                $generatedReport = "$changeReportDirectory/UpgradeReport.html"
                New-OctopusArtifact -Path "$generatedReport" -Name "$environmentName.UpgradeReport.html"
                EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "PowerShell"
            OctopusUseBundledTooling = "False"
        }

        packages "Template.Database.Package" {
            acquisition_location = "Server"
            feed = "octopus-server-built-in"
            package_id = ""
            properties = {
                Extract = "True"
                PackageParameterName = "Template.Database.Package"
                Purpose = ""
                SelectionMode = "deferred"
            }
        }
    }
}

step "notify-dbas" {
    condition = "Variable"
    name = "Notify DBAs"
    properties = {
        Octopus.Step.ConditionVariableExpression = "#{unless Octopus.Deployment.Error}#{Octopus.Action[Deploy Databases-Calculate Deployment Mode].Output.RunOnDeploy}#{/unless}"
    }

    action {
        action_type = "Octopus.Email"
        is_required = true
        notes = <<-EOT
                **Runs on Deployments Only**
                
                Sends out an email notifying DBAs there is a pending change for them to review.
                EOT
        properties = {
            Octopus.Action.Email.Body = "You can view the the deployment here: #{Octopus.Web.ServerUri}/app#/#{Octopus.Space.Id}/tasks/#{Octopus.Task.Id}."
            Octopus.Action.Email.Subject = "#{Octopus.Project.Name} #{Octopus.Release.Number} to #{Octopus.Environment.Name} has paused and is awaiting review."
            Octopus.Action.Email.To = "#{Template.Notification.Email}"
        }
    }
}

step "dbas-approve-delta-script" {
    condition = "Variable"
    name = "DBAs Approve Delta Script"
    properties = {
        Octopus.Step.ConditionVariableExpression = "#{unless Octopus.Deployment.Error}#{Octopus.Action[Deploy Databases-Calculate Deployment Mode].Output.RunOnDeploy}#{/unless}"
    }
    start_trigger = "StartWithPrevious"

    action {
        action_type = "Octopus.Manual"
        notes = <<-EOT
                **Runs on Deployments Only**
                
                Pauses the deployment to allow DBAs to review the delta script for any potential destructive actions on the database.
                EOT
        properties = {
            Octopus.Action.Manual.BlockConcurrentDeployments = "True"
            Octopus.Action.Manual.Instructions = "Please review and verify the migration database report matches your expectations."
            Octopus.Action.Manual.ResponsibleTeamIds = "global/everyone"
        }
    }
}

step "deploy-database-changes" {
    condition = "Variable"
    name = "Deploy Database Changes"
    properties = {
        Octopus.Step.ConditionVariableExpression = "#{unless Octopus.Deployment.Error}#{Octopus.Action[Deploy Databases-Calculate Deployment Mode].Output.RunOnDeploy}#{/unless}"
    }

    action {
        action_type = "Octopus.Script"
        notes = <<-EOT
                **Runs on Deployments Only**
                
                Deploys the database changes by running the scripts found in the package.
                EOT
        properties = {
            Octopus.Action.ExecutionTimeout.Minutes = "30"
            Octopus.Action.RunOnServer = "true"
            Octopus.Action.Script.ScriptBody = <<-EOT
                $connectionString = $OctopusParameters["Template.Database.ConnectionString"]
                $projectExe = $OctopusParameters["Template.DbUp.Executable"]
                $environmentName = $OctopusParameters["Octopus.Environment.Name"]
                $extractedPath = $OctopusParameters["Octopus.Action.Package[Template.Database.Package].ExtractedPath"]
                                
                Write-Host "Setting the current location to $extractedPath"
                Set-Location $extractedPath
                
                chmod +x "./$projectExe"
                
                & "./$projectExe" --ConnectionString="$connectionString"
                EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "PowerShell"
            OctopusUseBundledTooling = "False"
        }

        packages "Template.Database.Package" {
            acquisition_location = "Server"
            feed = "octopus-server-built-in"
            package_id = ""
            properties = {
                Extract = "True"
                PackageParameterName = "Template.Database.Package"
                Purpose = ""
                SelectionMode = "deferred"
            }
        }
    }
}