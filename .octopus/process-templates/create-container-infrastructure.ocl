name = "Runbook - Create Container Infrastructure"
description = "Process template that will create an Azure SQL Database and Tenant Namespace"

icon {
    color = "#25D284"
    id = "tools"
}

parameter "Template.SQLServer.Name" {
    display_settings = {
        Octopus.ControlType = "Sensitive"
    }
    help_text = "The URL or IP Address of the SQL Server to perform the work on"
    label = "SQL Server Name"
}

parameter "Template.SQLServer.User.Name" {
    display_settings = {
        Octopus.ControlType = "Sensitive"
    }
    help_text = <<-EOT
            
            The login of the user who has permissions to create a database.
            
            Leave blank for integrated security
            EOT
    label = "SQL Server Username"
}

parameter "Template.SQLServer.User.Password" {
    display_settings = {
        Octopus.ControlType = "Sensitive"
    }
    help_text = <<-EOT
            The password of the user who has permissions to create SQL Logins
            
            Leave blank for integrated security
            EOT
    label = "SQL Password"
}

parameter "Template.SQLServer.Database.Name" {
    display_settings = {
        Octopus.ControlType = "Sensitive"
    }
    help_text = "The name of the database to create"
    label = "Database to Create"
}

parameter "Template.Kubernetes.Namespace.Name" {
    display_settings = {
        Octopus.ControlType = "SingleLineText"
    }
    help_text = "The name of the Kubernetes Namespace to create if not exists"
    label = "Kubernetes Namespace Name"
}

step "azure-sql-create-database-if-not-exists" {
    name = "Azure SQL - Create Database If Not Exists"

    action {
        action_type = "Octopus.Script"
        is_required = true
        notes = <<-EOT
                **Always Runs**
                
                Runs a script on the Azure Sql Server to ensure the database exists and is configured as a serverless general purpose database with 1 vCore.
                EOT
        properties = {
            Octopus.Action.AutoRetry.MaximumCount = "3"
            Octopus.Action.AutoRetry.MinimumBackoff = "15"
            Octopus.Action.RunOnServer = "false"
            Octopus.Action.Script.ScriptBody = <<-EOT
                $createSQLServer = $OctopusParameters["Template.SQLServer.Name"]
                $createSqlLoginUserWhoHasCreateUserRights = $OctopusParameters["Template.SQLServer.User.Name"]
                $createSqlLoginPasswordWhoHasRights = $OctopusParameters["Template.SQLServer.User.Password"]
                $createDatabaseName = $OctopusParameters["Template.SQLServer.Database.Name"]
                $createCommandTimeout = 30
                $createSqlDatabaseRetryAttempts = 3
                
                if ([string]::IsNullOrWhiteSpace($createSqlLoginUserWhoHasCreateUserRights) -eq $true) {
                    Write-Output "No username found, using integrated security"
                    $connectionString = "Server=$createSqlServer;Database=master;integrated security=true;"
                }
                else {
                    Write-Output "Username found, using SQL Authentication"
                    $connectionString = "Server=$createSqlServer;Database=master;User ID=$createSqlLoginUserWhoHasCreateUserRights;Password=$createSqlLoginPasswordWhoHasRights;"
                }
                
                
                function Retry-Command {
                    [CmdletBinding()]
                    Param(
                        [Parameter(Position = 0, Mandatory = $true)]
                        [scriptblock]$ScriptBlock,
                 
                        [Parameter(Position = 1, Mandatory = $false)]
                        [int]$Maximum = 1,
                
                        [Parameter(Position = 2, Mandatory = $false)]
                        [int]$Delay = 100
                    )
                
                    Begin {
                        $count = 0
                    }
                
                    Process {
                        $ex = $null
                        do {
                            $count++
                            
                            try {
                                Write-Verbose "Attempt $count of $Maximum"
                                $ScriptBlock.Invoke()
                                return
                            }
                            catch {
                                $ex = $_
                                Write-Warning "Error occurred executing command (on attempt $count of $Maximum): $($ex.Exception.Message)"
                                Start-Sleep -Milliseconds $Delay
                            }
                        } while ($count -lt $Maximum)
                
                        # Throw an error after $Maximum unsuccessful invocations. Doesn't need
                        # a condition, since the function returns upon successful invocation.
                        throw "Execution failed (after $count attempts): $($ex.Exception.Message)"
                    }
                }
                
                [int]$maximum = 0
                [int]$delay = 100
                
                if (-not [int]::TryParse($createSqlDatabaseRetryAttempts, [ref]$maximum)) { $maximum = 0 }
                
                # We add 1 here as if retry attempts is 1, this means we make 2 attempts overall
                $maximum = $maximum + 1
                
                Retry-Command -Maximum $maximum -Delay $delay -ScriptBlock {
                	
                    $sqlConnection = New-Object System.Data.SqlClient.SqlConnection
                    $sqlConnection.ConnectionString = $connectionString
                    try {
                        
                        $command = $sqlConnection.CreateCommand()
                        $command.CommandType = [System.Data.CommandType]'Text'
                        $command.CommandTimeout = $createCommandTimeout
                
                        Write-Output "Opening the connection to $createSqlServer"
                        $sqlConnection.Open()
                
                        $escapedDatabaseName = $createDatabaseName.Replace("'", "''")
                
                        Write-Output "Running the if not exists then create for $createDatabaseName"
                        $command.CommandText = "IF NOT EXISTS (select Name from sys.databases where Name = '$escapedDatabaseName')
                        create database [$createDatabaseName]"
                        
                        $createAzureEdition = "GeneralPurpose"        
                        Write-Verbose "Specifying Azure SqlDb Edition: $($createAzureEdition)"
                        $command.CommandText += ("`r`n (EDITION = '{0}'" -f $createAzureEdition)
                        
                        $createAzureServiceObjective = "GP_S_Gen5_1"
                        Write-Verbose "Specifying Azure SqlDb Service Objective to: $($createAzureEdition)"
                        $command.CommandText += (", SERVICE_OBJECTIVE = '{0}')" -f $createAzureServiceObjective)
                        
                		$createAzureBackupStorageRedundancy = "LOCAL"
                		Write-Verbose "Specifying Azure Backup storage redundancy: $($createAzureBackupStorageRedundancy)"
                        $command.CommandText += ("`r`n WITH BACKUP_STORAGE_REDUNDANCY='{0}'" -f $createAzureBackupStorageRedundancy)        
                
                        $command.CommandText += ";"
                
                        $result = $command.ExecuteNonQuery()
                        Write-Verbose "ExecuteNonQuery result: $result"
                
                        Write-Output "Successfully executed the database creation script for $createDatabaseName"
                    }
                
                    finally {
                        if ($null -ne $sqlConnection) {
                            Write-Output "Closing the connection to $createSqlServer"
                            $sqlConnection.Dispose()
                        }
                    }
                }
                EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "PowerShell"
            OctopusUseBundledTooling = "False"
        }
        worker_pool_variable = ""
    }
}

step "verify-database-creation" {
    name = "Verify Database Creation"

    action {
        action_type = "Octopus.Script"
        notes = <<-EOT
                **Always Runs**
                
                Runs a script on the database to make sure it was successfully created.
                EOT
        properties = {
            Octopus.Action.RunOnServer = "false"
            Octopus.Action.Script.ScriptBody = <<-EOT
                $scriptToRun = "Select 1 as Number"
                $databaseName = $OctopusParameters["Template.SQLServer.Database.Name"]
                $databaseServer = $OctopusParameters["Template.SQLServer.Name"]
                $userName = $OctopusParameters["Template.SQLServer.User.Name"]
                $userPassword = $OctopusParameters["Template.SQLServer.User.Password"]
                
                Write-Host "Database Server: $databaseServer"
                Write-Host "Database Name: $databaseName"
                
                if ([string]::IsNullOrWhiteSpace($userName) -eq $true){
                	Write-Host "No username found, using integrated security"
                    $connectionString = "Server=$databaseServer;Database=$databaseName;integrated security=true;"
                }
                else {
                	Write-Host "Username found, using SQL Authentication"
                    $connectionString = "Server=$databaseServer;Database=$databaseName;User ID=$userName;Password=$userPassword;"
                }
                
                $sqlConnection = New-Object System.Data.SqlClient.SqlConnection
                $sqlConnection.ConnectionString = $connectionString
                
                $command = $sqlConnection.CreateCommand()
                $command.CommandType = [System.Data.CommandType]'Text'
                $command.CommandText = $scriptToRun
                
                Write-Host "Opening the connection to $databaseName on $databaseServer"
                
                $sqlConnection.Open()   
                
                try
                {
                	Write-Highlight "Creating transaction"
                	$command.Transaction = $sqlConnection.BeginTransaction()
                    
                    Write-Highlight "Running query now"
                	$rowsChanged = $command.ExecuteNonQuery()
                    
                    Write-Highlight "Committing Transaction"
                    $command.Transaction.Commit()
                }
                catch
                {
                	Write-Highlight "Exception with running script, rolling back transaction"
                	$command.Transaction.Rollback()
                	throw $_
                }
                EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "PowerShell"
            OctopusUseBundledTooling = "False"
        }
        worker_pool_variable = ""
    }
}

step "create-application-namespace" {
    name = "Create Application Namespace"

    action {
        action_type = "Octopus.KubernetesRunScript"
        notes = <<-EOT
                **Always Runs**
                
                Applies the manifest file to ensure the namespace exists for this particular tenant.
                EOT
        properties = {
            Octopus.Action.Script.ScriptBody = <<-EOT
                $namespace = $OctopusParameters["Template.Kubernetes.Namespace.Name"]
                
                kubectl create namespace $namespace --dry-run=client -o yaml | kubectl apply -f -
                EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "PowerShell"
        }
        worker_pool_variable = ""
    }
}