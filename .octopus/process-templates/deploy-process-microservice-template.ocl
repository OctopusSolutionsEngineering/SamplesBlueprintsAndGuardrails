name = "Deploy process - Microservice template"
description = "Process template that will run a database update script, deploy a container, and send a slack notification."

icon {
    color = "#145586"
    id = "rocket"
}

parameter "db-package" {
    display_settings = {
        Octopus.ControlType = "Package"
    }
    help_text = "Provide a Package with one or more SQL scripts to execute."
    label = "Database Package"
}

parameter "db-connection-string" {
    display_settings = {
        Octopus.ControlType = "SingleLineText"
    }
    help_text = "Provide a database connection string."
    label = "Database Connection String"
}

parameter "email-subject" {
    display_settings = {
        Octopus.ControlType = "SingleLineText"
    }
    help_text = "Provide an email notification subject. "
    label = "Email Notification - Subject"
}

parameter "email-body" {
    display_settings = {
        Octopus.ControlType = "MultiLineText"
    }
    help_text = "Provide the email notification body. "
    label = "Email Notification - Body"
}

step "update-database" {
    name = "Update database"

    action {
        action_type = "Octopus.Script"
        properties = {
            Octopus.Action.RunOnServer = "false"
            Octopus.Action.Script.ScriptBody = <<-EOT
                # Updating database
                
                Write-Host "Executing database update script"
                Write-Host "db-client run database=$OctopusParameters["db-connection-string"] $OctopusParameters["Octopus.Action.Package[db-package].ExtractedPath"]/*.sql"
                
                EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "PowerShell"
            OctopusUseBundledTooling = "False"
        }
        worker_pool_variable = ""

        packages "db-package" {
            acquisition_location = "Server"
            feed = "octopus-server-built-in"
            package_id = ""
            properties = {
                Extract = "True"
                PackageParameterName = "db-package"
                Purpose = ""
                SelectionMode = "deferred"
            }
        }
    }
}

step "create-namespace-if-it-doesn-t-exist" {
    name = "Create namespace (if it doesn't exist)"

    action {
        action_type = "Octopus.Script"
        properties = {
            Octopus.Action.RunOnServer = "false"
            Octopus.Action.Script.ScriptBody = <<-EOT
                # Create namespace if it doesn't exist 
                
                kubectl create namespace '$OctopusParameters["Octopus.Project.Name"]-$OctopusParameters["Octopus.Environment.Name"]'
                
                EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "PowerShell"
            OctopusUseBundledTooling = "False"
        }
        worker_pool_variable = ""
    }
}

step "deploy-microservice" {
    name = "Deploy microservice"

    action {
        action_type = "Octopus.Script"
        properties = {
            Octopus.Action.RunOnServer = "false"
            Octopus.Action.Script.ScriptBody = "Write-Host \"Deploying #{Octopus.Project.Name} #{Octopus.Release.Number} to #{Octopus.Environment.Name} ...\""
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "PowerShell"
            OctopusUseBundledTooling = "False"
        }
        worker_pool_variable = ""
    }
}

step "notify-team" {
    name = "Notify team"

    action {
        action_type = "Octopus.Email"
        properties = {
            Octopus.Action.Email.Body = "#{email-body}"
            Octopus.Action.Email.Subject = "#{email-subject}"
            Octopus.Action.Email.To = "platform-team@octopus.com"
        }
        worker_pool_variable = ""
    }
}