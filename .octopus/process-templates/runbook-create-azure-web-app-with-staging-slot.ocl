name = "Runbook - Create Azure Web App with staging slot "
description = "A process template will be created for the resource group, app service plan, and Azure Web App with a Staging Slot, and it will be registered with Octopus Deploy."

icon {
    color = "#3CA4F3"
    id = "router"
}

parameter "Template.Azure.Account" {
    display_settings = {
        Octopus.ControlType = "AzureAccount"
    }
    help_text = "The Azure Account that will be used to create the resource group, app service plan, and staging slot."
    label = "Azure Account"
}

parameter "Template.Azure.ResourceGroup.Name" {
    display_settings = {
        Octopus.ControlType = "SingleLineText"
    }
    help_text = "The name of the resource group to use or will be created if it doesn't exist."
    label = "Resource Group Name"
}

parameter "Template.Azure.WebApp.Name" {
    display_settings = {
        Octopus.ControlType = "SingleLineText"
    }
    help_text = "The name of the web application to create"
    label = "Web App Name"
}

parameter "Template.Azure.WebApp.Runtime" {
    display_settings = {
        Octopus.ControlType = "SingleLineText"
    }
    help_text = "The underlying runtime of the Azure Web App"
    label = "Web App Runtime"
}

parameter "Template.Azure.WebApp.StartUpFile" {
    display_settings = {
        Octopus.ControlType = "SingleLineText"
    }
    help_text = "The name of the file the web app will use when starting up.  For example, `TraditionalApp.Web.dll`"
    label = "Web App Startup File"
}

parameter "Template.Azure.WebApp.ServicePlan.Name" {
    display_settings = {
        Octopus.ControlType = "SingleLineText"
    }
    help_text = "The name of the App Service Plan that will be used or created if it doesn't exist."
    label = "Service Plan Name"
}

parameter "Template.Azure.WebApp.Sku" {
    display_settings = {
        Octopus.ControlType = "SingleLineText"
    }
    help_text = "The SKU name to use when creating the Azure Web App"
    label = "Web App SKU"
}

parameter "Template.Azure.Location" {
    display_settings = {
        Octopus.ControlType = "SingleLineText"
    }
    help_text = "The region where the Azure Web App will be created."
    label = "Azure Region"
}

parameter "Template.Octopus.WebApp.Role" {
    display_settings = {
        Octopus.ControlType = "SingleLineText"
    }
    help_text = "The that will be used when creating (or updating) the Azure Web App Target in Octopus Deploy."
    label = "Web App Octopus Tag"
}

parameter "Template.Octopus.WorkerPool.Name" {
    display_settings = {
        Octopus.ControlType = "SingleLineText"
    }
    help_text = "The name of the worker pool that the Azure Web App will use by default."
    label = "Default Octopus Worker Pool Name"
}

step "create-resource-group-if-not-exists" {
    name = "Create Resource Group If Not Exists"

    action {
        action_type = "Octopus.AzurePowerShell"
        notes = <<-EOT
                **Always Runs**
                
                Creates the resource group if it doesn't currently exist in Azure.
                EOT
        properties = {
            Octopus.Action.Azure.AccountId = "#{Template.Azure.Account}"
            Octopus.Action.Script.ScriptBody = <<-EOT
                $resourceGroupName = $OctopusParameters["Template.Azure.ResourceGroup.Name"]
                $resourceGroupLocation = $OctopusParameters["Template.Azure.Location"]
                $spaceName = $OctopusParameters["Octopus.Space.Name"]
                $environmentName = $OctopusParameters["Octopus.Environment.Name"]
                
                if ((az group exists --name $resourceGroupName) -eq $false)
                {
                	Write-Output "Creating resource group $resourceGroupName in $resourceGroupLocation"
                    az group create --location $resourceGroupLocation --name $resourceGroupName --tags "Space=$spaceName" "Environment=$environmentName"
                }
                EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "PowerShell"
            OctopusUseBundledTooling = "False"
        }
        worker_pool_variable = ""
    }
}

step "create-app-service-plan" {
    name = "Create App Service Plan"

    action {
        action_type = "Octopus.AzurePowerShell"
        notes = <<-EOT
                **Always Runs**
                
                Creates the Azure App Service Plan for this Azure Web App
                EOT
        properties = {
            Octopus.Action.Azure.AccountId = "#{Template.Azure.Account}"
            Octopus.Action.Script.ScriptBody = <<-EOT
                # Get variables
                $appServicePlanName = $OctopusParameters["Template.Azure.WebApp.ServicePlan.Name"]
                $appServicePlanSku = $OctopusParameters["Template.Azure.WebApp.Sku"]
                $resourceGroupName = $OctopusParameters["Template.Azure.ResourceGroup.Name"]
                
                # Create service plan
                Write-Host "Creating app service plan ..."
                az appservice plan create --name $appServicePlanName --resource-group $resourceGroupName --sku $appServicePlanSku --is-linux
                EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "PowerShell"
            OctopusUseBundledTooling = "False"
        }
        worker_pool_variable = ""
    }
}

step "create-azure-web-app-with-staging-slot" {
    name = "Create Azure Web App with Staging Slot"

    action {
        action_type = "Octopus.AzurePowerShell"
        notes = <<-EOT
                **Always Runs**
                
                Creates the Azure Web App with a staging slot and registers it with Octopus Deploy.
                EOT
        properties = {
            Octopus.Action.Azure.AccountId = "#{Template.Azure.Account}"
            Octopus.Action.Script.ScriptBody = <<-EOT
                # Get variables
                $resourceGroupName = $OctopusParameters["Template.Azure.ResourceGroup.Name"]
                $appServiceName = $OctopusParameters["Template.Azure.WebApp.Name"]
                $appServiceRuntime = $OctopusParameters["Template.Azure.WebApp.Runtime"]
                $appServicePlanName = $OctopusParameters["Template.Azure.WebApp.ServicePlan.Name"]
                $azureLocation = $OctopusParameters["Template.Azure.Location"]
                $startUpFile = $OctopusParameters["Template.Azure.WebApp.StartUpFile"]
                $Octopustags = $OctopusParameters["Template.Octopus.WebApp.Role"]
                $OctopusWorkerPool = $OctopusParameters["Template.Octopus.WorkerPool.Name"]
                
                $stagingSlot = "Staging"
                
                # Create App Service
                Write-Host "Creating azure web app service ..."
                az webapp create --name $appServiceName --resource-group $resourceGroupName  --plan $appServicePlanName --runtime "$appServiceRuntime" --startup-file "$startUpFile" --basic-auth Disabled
                
                Write-Host "Creating the staging slot..."
                az webapp deployment slot create --name $appServiceName --resource-group $resourceGroupName --slot $stagingSlot
                
                # Register target
                New-OctopusAzureWebAppTarget -Name $appServiceName -AzureWebApp $appServiceName -AzureResourceGroupName $resourceGroupName -OctopusAccountIdOrName $azureAccount -OctopusRoles "$Octopustags" -azureWebAppSlot $stagingSlot -octopusDefaultWorkerPoolIdOrName $OctopusWorkerPool -updateIfExisting
                EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "PowerShell"
            OctopusUseBundledTooling = "False"
        }
        worker_pool_variable = ""
    }
}

step "notify-operations-of-new-application" {
    name = "Notify Operations of New Application"

    action {
        action_type = "Octopus.Email"
        notes = "**Always Runs**"
        properties = {
            Octopus.Action.Email.Body = "You can view the results here: #{Octopus.Web.ServerUri}/app#/#{Octopus.Space.Id}/tasks/#{Octopus.Task.Id}"
            Octopus.Action.Email.Subject = "#{Octopus.Project.Name} #{Octopus.Runbook.Name} to #{Octopus.Environment.Name} has #{if Octopus.Deployment.Error}failed#{else}completed successfully#{/if}"
            Octopus.Action.Email.To = "operations@octopus.com"
        }
        worker_pool_variable = ""
    }
}